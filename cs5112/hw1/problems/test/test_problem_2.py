import unittest
import sys
import helper_functions
sys.path.append("..")

from problem_2.p2 import interval_covering

class TestProblem2(unittest.TestCase):
    ### Public tests
    def test_cover_public_all(self):
        """Public test #1 for interval cover"""
        cover = interval_covering(4, [[2, 3], [3, 4], [0, 1], [1, 2]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0, 1), (1, 2), (2, 3), (3, 4)})

    def test_cover_public_size_1(self):
        """Public test #2 for interval cover"""
        cover = interval_covering(6, [[0, 2], [1, 6], [0, 6], [3, 5]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0,6)})

    def test_cover_public_size_2(self):
        """Public test #3 for interval cover"""
        cover = interval_covering(6, [[3, 6], [2, 4], [0, 3]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(3, 6), (0, 3)})

    def test_cover_public_size_3(self):
        """Public test #4 for interval cover"""
        cover = interval_covering(6, [[0, 2], [0, 1], [2, 3], [2, 4], [4, 6]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(4, 6), (0, 2), (2, 4)})

    def test_cover_public_size_4(self):
        """Public test #4 for interval cover"""
        cover = interval_covering(10, [[0, 5], [1, 6], [5, 10], [4, 9]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0,5),(5,10)})    
    
    ### Private tests
    def test_cover_small_1(self):
        """Test interval cover small n #1. Breaks 2b."""     
        cover = interval_covering(6, [[0,3], [3, 6], [1, 5]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(3, 6), (0, 3)})

    def test_cover_small_2(self):
        """Test interval cover small n #2. Breaks 2d."""
        cover = interval_covering(4, [[0, 1], [1, 2], [0, 3], [2, 4]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0, 3), (2, 4)})

    def test_cover_small_3(self):
        """Test interval cover small n #3. Multiple options."""
        cover = interval_covering(7, [[0,6], [3, 7], [5, 7], [0,2]])
        cover_set = set(tuple(pair) for pair in cover)
        sol1 = {(0, 6), (3, 7)}
        sol2 = {(0, 6), (5, 7)}
        self.assertTrue(cover_set == sol1 or cover_set == sol2)

    def test_cover_small_4(self):
        """Test interval cover small n #4. n > M input."""
        cover = interval_covering(20, [[0, 1], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [1, 2], [0, 9], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [10, 20], [13, 14], [14, 15]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0, 9), (9, 10), (10, 20)})

    def test_cover_no_incomplete_5(self):
        """Test interval cover small n #5. Checking off by 1."""
        cover = interval_covering(10, [[0, 4], [0, 5], [5, 10]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0, 5), (5, 10)})

    
    def test_cover_no_incomplete_2(self):
        """Test interval cover small n #5. Checking off by 1."""
        cover = interval_covering(10, [[0, 1], [1, 2], [2, 10]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0, 1), (2, 10), (1, 2)})

    def test_cover_tie_breaking_1(self):
        """Test interval cover small n #6. Checking tie-breaking."""
        cover = interval_covering(10, [[0, 2], [1, 3], [3, 10], [2, 10]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0, 2), (2, 10)})

    def test_cover_long_input_1(self):
        """Test interval cover long #1."""
        input_list = [[880, 994], [966, 997], [39, 625], [886, 897], [375, 431], [198, 896], [416, 957], [785, 851], [172, 340], [816, 829], [938, 953], [245, 748], [431, 600], [714, 818], [13, 609], [227, 532], [693, 704], [898, 993], [755, 944], [507, 842], [366, 476], [472, 494], [850, 934], [303, 307], [313, 339], [331, 634], [239, 371], [597, 781], [897, 911], [173, 691], [986, 998], [804, 832], [449, 455], [294, 343], [126, 350], [405, 714], [315, 393], [978, 984], [218, 460], [620, 629], [100, 105], [285, 644], [516, 913], [45, 928], [731, 856], [183, 224], [473, 542], [230, 592], [996, 997], [892, 894], [638, 898], [709, 711], [821, 861], [53, 891], [170, 909], [653, 877], [661, 890], [5, 585], [952, 972], [342, 792], [844, 886], [445, 722], [895, 940], [913, 976], [110, 899], [834, 930], [394, 667], [737, 750], [734, 852], [364, 486], [740, 904], [771, 919], [181, 550], [505, 629], [223, 394], [401, 419], [487, 849], [973, 999], [612, 620], [184, 686], [601, 965], [414, 492], [45, 509], [272, 399], [604, 872], [266, 477], [715, 730], [585, 886], [896, 909], [232, 847], [608, 878], [122, 459], [277, 769], [232, 865], [909, 973], [593, 764], [68, 604], [992, 998], [929, 960], [706, 879], [942, 988], [761, 976], [779, 872], [970, 979], [427, 969], [473, 509], [581, 875], [643, 868], [704, 707], [522, 578], [148, 489], [995, 999], [393, 940], [836, 844], [258, 486], [464, 591], [179, 467], [658, 950], [83, 728], [110, 983], [352, 358], [380, 615], [182, 194], [795, 955], [469, 943], [779, 849], [981, 993], [838, 935], [921, 951], [556, 966], [178, 727], [970, 974], [96, 694], [648, 792], [191, 962], [565, 596], [371, 749], [573, 856], [380, 736], [540, 688], [105, 150], [743, 895], [332, 677], [781, 787], [988, 1000], [829, 836], [999, 1000], [289, 724], [778, 781], [227, 331], [110, 749], [879, 949], [569, 634], [508, 615], [795, 797], [649, 990], [435, 890], [289, 427], [338, 567], [411, 462], [769, 772], [778, 902], [508, 651], [765, 792], [28, 926], [499, 929], [536, 569], [355, 921], [636, 656], [301, 950], [419, 420], [958, 972], [780, 813], [872, 896], [562, 999], [271, 527], [763, 989], [601, 689], [614, 619], [65, 687], [714, 715], [307, 318], [302, 779], [744, 984], [893, 973], [968, 976], [882, 936], [58, 675], [780, 916], [610, 612], [3, 977], [504, 603], [277, 951], [853, 918], [917, 921], [915, 988], [178, 182], [340, 342], [650, 824], [156, 679], [625, 749], [210, 897], [438, 941], [622, 860], [875, 951], [616, 700], [341, 352], [548, 565], [202, 831], [412, 650], [345, 987], [33, 65], [151, 438], [892, 967], [170, 726], [128, 720], [88, 266], [625, 879], [984, 988], [976, 984], [823, 891], [828, 829], [834, 909], [241, 642], [251, 674], [926, 992], [488, 748], [628, 642], [52, 217], [690, 873], [733, 853], [899, 974], [387, 692], [401, 874], [468, 635], [409, 747], [167, 716], [559, 911], [372, 438], [565, 585], [705, 745], [455, 472], [953, 968], [792, 880], [299, 480], [729, 958], [585, 932], [865, 977], [325, 874], [709, 720], [442, 892], [664, 834], [640, 876], [562, 975], [771, 978], [52, 77], [353, 819], [673, 900], [479, 806], [472, 767], [297, 686], [82, 432], [751, 865], [102, 846], [483, 794], [515, 746], [358, 363], [459, 693], [486, 948], [863, 944], [644, 747], [56, 824], [480, 743], [379, 849], [597, 910], [735, 862], [515, 602], [322, 571], [586, 662], [942, 953], [702, 712], [774, 969], [402, 661], [310, 596], [465, 619], [910, 997], [972, 981], [626, 811], [435, 438], [74, 87], [870, 942], [122, 136], [814, 889], [708, 880], [46, 928], [934, 963], [715, 748], [629, 843], [222, 995], [854, 952], [247, 271], [478, 701], [919, 938], [66, 366], [458, 881], [519, 720], [573, 929], [334, 693], [594, 979], [588, 685], [147, 695], [901, 916], [332, 341], [55, 194], [533, 758], [200, 707], [142, 882], [19, 137], [431, 719], [673, 899], [63, 171], [435, 698], [795, 852], [515, 965], [26, 32], [354, 877], [797, 809], [859, 891], [273, 394], [111, 988], [398, 654], [312, 758], [826, 979], [76, 392], [321, 327], [36, 841], [331, 371], [512, 532], [904, 907], [815, 969], [821, 900], [295, 399], [590, 743], [884, 961], [824, 919], [759, 948], [115, 697], [71, 947], [618, 680], [180, 207], [32, 848], [908, 927], [473, 670], [420, 435], [534, 713], [517, 880], [413, 423], [785, 969], [618, 801], [87, 100], [866, 884], [724, 791], [416, 446], [656, 693], [865, 925], [478, 915], [996, 999], [538, 548], [988, 995], [547, 615], [73, 439], [911, 919], [48, 702], [899, 926], [493, 653], [239, 242], [788, 848], [762, 948], [424, 791], [108, 680], [85, 705], [34, 242], [726, 869], [122, 763], [397, 401], [32, 52], [585, 610], [745, 900], [712, 812], [233, 478], [635, 885], [741, 866], [194, 239], [283, 982], [45, 525], [438, 447], [320, 473], [182, 350], [592, 761], [293, 437], [548, 974], [940, 968], [730, 731], [16, 821], [149, 438], [169, 178], [125, 993], [388, 738], [123, 565], [582, 841], [511, 799], [406, 755], [278, 606], [795, 814], [612, 631], [765, 962], [962, 991], [430, 600], [796, 797], [205, 329], [486, 500], [396, 445], [402, 995], [645, 911], [703, 861], [568, 664], [285, 595], [150, 169], [589, 714], [702, 929], [606, 803], [954, 973], [302, 805], [2, 800], [695, 727], [457, 935], [368, 625], [216, 738], [667, 790], [796, 913], [973, 973], [242, 247], [637, 758], [617, 929], [134, 394], [958, 993], [666, 803], [122, 312], [962, 972], [753, 978], [37, 241], [354, 564], [257, 384], [56, 74], [455, 485], [436, 862], [775, 993], [667, 902], [716, 916], [22, 90], [297, 313], [523, 875], [261, 637], [707, 714], [949, 983], [201, 452], [266, 343], [486, 575], [330, 364], [179, 958], [816, 904], [452, 698], [161, 244], [965, 978], [193, 632], [303, 602], [893, 971], [336, 788], [646, 694], [349, 489], [15, 473], [665, 945], [809, 828], [765, 803], [448, 449], [22, 359], [21, 489], [359, 655], [938, 996], [20, 26], [47, 370], [359, 484], [794, 997], [522, 538], [991, 998], [642, 692], [154, 618], [858, 972], [627, 838], [125, 164], [182, 469], [905, 922], [984, 986], [362, 930], [629, 636], [711, 827], [787, 795], [171, 563], [538, 774], [622, 844], [731, 769], [565, 956], [281, 303], [445, 820], [337, 887], [363, 369], [162, 855], [447, 448], [770, 854], [263, 776], [922, 988], [542, 865], [924, 930], [528, 939], [547, 562], [169, 750], [443, 999], [721, 845], [854, 969], [355, 477], [685, 779], [0, 20], [850, 855], [608, 913], [511, 733], [116, 460], [709, 736], [286, 880], [152, 562], [351, 619], [891, 892], [271, 281], [732, 975], [455, 465], [922, 983], [318, 325], [101, 955], [978, 990], [785, 861], [428, 465], [29, 478], [369, 388], [324, 902], [888, 953], [549, 593], [772, 778], [741, 772], [818, 894], [30, 549], [471, 548], [636, 755], [494, 522], [396, 792], [610, 990], [722, 804], [325, 332], [691, 816], [28, 234], [388, 397], [180, 606], [606, 714], [563, 743], [729, 784], [619, 823], [464, 657], [428, 972], [52, 56], [819, 979], [85, 318], [351, 892], [413, 458], [772, 885], [883, 972]]
        cover = interval_covering(1000, input_list)
        self.assertEqual(4, len(cover))
        for pair in cover:
            self.assertIn(pair, [[880, 994], [966, 997], [39, 625], [886, 897], [375, 431], [198, 896], [416, 957], [785, 851], [172, 340], [816, 829], [938, 953], [245, 748], [431, 600], [714, 818], [13, 609], [227, 532], [693, 704], [898, 993], [755, 944], [507, 842], [366, 476], [472, 494], [850, 934], [303, 307], [313, 339], [331, 634], [239, 371], [597, 781], [897, 911], [173, 691], [986, 998], [804, 832], [449, 455], [294, 343], [126, 350], [405, 714], [315, 393], [978, 984], [218, 460], [620, 629], [100, 105], [285, 644], [516, 913], [45, 928], [731, 856], [183, 224], [473, 542], [230, 592], [996, 997], [892, 894], [638, 898], [709, 711], [821, 861], [53, 891], [170, 909], [653, 877], [661, 890], [5, 585], [952, 972], [342, 792], [844, 886], [445, 722], [895, 940], [913, 976], [110, 899], [834, 930], [394, 667], [737, 750], [734, 852], [364, 486], [740, 904], [771, 919], [181, 550], [505, 629], [223, 394], [401, 419], [487, 849], [973, 999], [612, 620], [184, 686], [601, 965], [414, 492], [45, 509], [272, 399], [604, 872], [266, 477], [715, 730], [585, 886], [896, 909], [232, 847], [608, 878], [122, 459], [277, 769], [232, 865], [909, 973], [593, 764], [68, 604], [992, 998], [929, 960], [706, 879], [942, 988], [761, 976], [779, 872], [970, 979], [427, 969], [473, 509], [581, 875], [643, 868], [704, 707], [522, 578], [148, 489], [995, 999], [393, 940], [836, 844], [258, 486], [464, 591], [179, 467], [658, 950], [83, 728], [110, 983], [352, 358], [380, 615], [182, 194], [795, 955], [469, 943], [779, 849], [981, 993], [838, 935], [921, 951], [556, 966], [178, 727], [970, 974], [96, 694], [648, 792], [191, 962], [565, 596], [371, 749], [573, 856], [380, 736], [540, 688], [105, 150], [743, 895], [332, 677], [781, 787], [988, 1000], [829, 836], [999, 1000], [289, 724], [778, 781], [227, 331], [110, 749], [879, 949], [569, 634], [508, 615], [795, 797], [649, 990], [435, 890], [289, 427], [338, 567], [411, 462], [769, 772], [778, 902], [508, 651], [765, 792], [28, 926], [499, 929], [536, 569], [355, 921], [636, 656], [301, 950], [419, 420], [958, 972], [780, 813], [872, 896], [562, 999], [271, 527], [763, 989], [601, 689], [614, 619], [65, 687], [714, 715], [307, 318], [302, 779], [744, 984], [893, 973], [968, 976], [882, 936], [58, 675], [780, 916], [610, 612], [3, 977], [504, 603], [277, 951], [853, 918], [917, 921], [915, 988], [178, 182], [340, 342], [650, 824], [156, 679], [625, 749], [210, 897], [438, 941], [622, 860], [875, 951], [616, 700], [341, 352], [548, 565], [202, 831], [412, 650], [345, 987], [33, 65], [151, 438], [892, 967], [170, 726], [128, 720], [88, 266], [625, 879], [984, 988], [976, 984], [823, 891], [828, 829], [834, 909], [241, 642], [251, 674], [926, 992], [488, 748], [628, 642], [52, 217], [690, 873], [733, 853], [899, 974], [387, 692], [401, 874], [468, 635], [409, 747], [167, 716], [559, 911], [372, 438], [565, 585], [705, 745], [455, 472], [953, 968], [792, 880], [299, 480], [729, 958], [585, 932], [865, 977], [325, 874], [709, 720], [442, 892], [664, 834], [640, 876], [562, 975], [771, 978], [52, 77], [353, 819], [673, 900], [479, 806], [472, 767], [297, 686], [82, 432], [751, 865], [102, 846], [483, 794], [515, 746], [358, 363], [459, 693], [486, 948], [863, 944], [644, 747], [56, 824], [480, 743], [379, 849], [597, 910], [735, 862], [515, 602], [322, 571], [586, 662], [942, 953], [702, 712], [774, 969], [402, 661], [310, 596], [465, 619], [910, 997], [972, 981], [626, 811], [435, 438], [74, 87], [870, 942], [122, 136], [814, 889], [708, 880], [46, 928], [934, 963], [715, 748], [629, 843], [222, 995], [854, 952], [247, 271], [478, 701], [919, 938], [66, 366], [458, 881], [519, 720], [573, 929], [334, 693], [594, 979], [588, 685], [147, 695], [901, 916], [332, 341], [55, 194], [533, 758], [200, 707], [142, 882], [19, 137], [431, 719], [673, 899], [63, 171], [435, 698], [795, 852], [515, 965], [26, 32], [354, 877], [797, 809], [859, 891], [273, 394], [111, 988], [398, 654], [312, 758], [826, 979], [76, 392], [321, 327], [36, 841], [331, 371], [512, 532], [904, 907], [815, 969], [821, 900], [295, 399], [590, 743], [884, 961], [824, 919], [759, 948], [115, 697], [71, 947], [618, 680], [180, 207], [32, 848], [908, 927], [473, 670], [420, 435], [534, 713], [517, 880], [413, 423], [785, 969], [618, 801], [87, 100], [866, 884], [724, 791], [416, 446], [656, 693], [865, 925], [478, 915], [996, 999], [538, 548], [988, 995], [547, 615], [73, 439], [911, 919], [48, 702], [899, 926], [493, 653], [239, 242], [788, 848], [762, 948], [424, 791], [108, 680], [85, 705], [34, 242], [726, 869], [122, 763], [397, 401], [32, 52], [585, 610], [745, 900], [712, 812], [233, 478], [635, 885], [741, 866], [194, 239], [283, 982], [45, 525], [438, 447], [320, 473], [182, 350], [592, 761], [293, 437], [548, 974], [940, 968], [730, 731], [16, 821], [149, 438], [169, 178], [125, 993], [388, 738], [123, 565], [582, 841], [511, 799], [406, 755], [278, 606], [795, 814], [612, 631], [765, 962], [962, 991], [430, 600], [796, 797], [205, 329], [486, 500], [396, 445], [402, 995], [645, 911], [703, 861], [568, 664], [285, 595], [150, 169], [589, 714], [702, 929], [606, 803], [954, 973], [302, 805], [2, 800], [695, 727], [457, 935], [368, 625], [216, 738], [667, 790], [796, 913], [973, 973], [242, 247], [637, 758], [617, 929], [134, 394], [958, 993], [666, 803], [122, 312], [962, 972], [753, 978], [37, 241], [354, 564], [257, 384], [56, 74], [455, 485], [436, 862], [775, 993], [667, 902], [716, 916], [22, 90], [297, 313], [523, 875], [261, 637], [707, 714], [949, 983], [201, 452], [266, 343], [486, 575], [330, 364], [179, 958], [816, 904], [452, 698], [161, 244], [965, 978], [193, 632], [303, 602], [893, 971], [336, 788], [646, 694], [349, 489], [15, 473], [665, 945], [809, 828], [765, 803], [448, 449], [22, 359], [21, 489], [359, 655], [938, 996], [20, 26], [47, 370], [359, 484], [794, 997], [522, 538], [991, 998], [642, 692], [154, 618], [858, 972], [627, 838], [125, 164], [182, 469], [905, 922], [984, 986], [362, 930], [629, 636], [711, 827], [787, 795], [171, 563], [538, 774], [622, 844], [731, 769], [565, 956], [281, 303], [445, 820], [337, 887], [363, 369], [162, 855], [447, 448], [770, 854], [263, 776], [922, 988], [542, 865], [924, 930], [528, 939], [547, 562], [169, 750], [443, 999], [721, 845], [854, 969], [355, 477], [685, 779], [0, 20], [850, 855], [608, 913], [511, 733], [116, 460], [709, 736], [286, 880], [152, 562], [351, 619], [891, 892], [271, 281], [732, 975], [455, 465], [922, 983], [318, 325], [101, 955], [978, 990], [785, 861], [428, 465], [29, 478], [369, 388], [324, 902], [888, 953], [549, 593], [772, 778], [741, 772], [818, 894], [30, 549], [471, 548], [636, 755], [494, 522], [396, 792], [610, 990], [722, 804], [325, 332], [691, 816], [28, 234], [388, 397], [180, 606], [606, 714], [563, 743], [729, 784], [619, 823], [464, 657], [428, 972], [52, 56], [819, 979], [85, 318], [351, 892], [413, 458], [772, 885], [883, 972]])
        self.assertTrue(helper_functions.verify_all_is_covered(1000, cover))

    def test_cover_long_input_2(self):
        """Test interval cover long #2."""
        input_list = [[804, 828], [407, 634], [358, 360], [498, 672], [82, 703], [824, 922], [8, 18], [723, 885], [879, 885], [823, 981], [496, 586], [511, 974], [314, 536], [614, 825], [154, 831], [188, 326], [372, 910], [714, 939], [182, 929], [111, 222], [53, 775], [275, 995], [3, 536], [604, 914], [753, 866], [572, 702], [244, 342], [660, 684], [628, 853], [109, 810], [497, 806], [703, 883], [84, 664], [371, 419], [550, 561], [739, 824], [739, 833], [721, 946], [233, 872], [243, 260], [529, 614], [240, 996], [514, 589], [195, 863], [32, 82], [301, 881], [26, 249], [525, 607], [531, 934], [70, 975], [15, 523], [363, 959], [215, 813], [249, 299], [741, 990], [477, 971], [770, 815], [395, 865], [188, 572], [377, 749], [947, 960], [622, 773], [725, 767], [966, 1000], [940, 948], [58, 718], [988, 997], [813, 916], [74, 842], [4, 616], [256, 553], [624, 720], [333, 535], [50, 85], [189, 243], [527, 787], [205, 871], [753, 959], [126, 223], [737, 862], [66, 694], [512, 533], [455, 893], [985, 991], [556, 585], [413, 676], [605, 837], [788, 800], [274, 844], [940, 943], [907, 918], [54, 194], [863, 979], [225, 341], [810, 851], [143, 936], [484, 848], [390, 902], [434, 847], [692, 724], [672, 755], [146, 160], [57, 222], [584, 907], [784, 843], [314, 628], [13, 566], [752, 896], [435, 536], [969, 992], [839, 873], [309, 317], [532, 734], [3, 372], [929, 937], [910, 933], [887, 940], [171, 203], [799, 836], [45, 463], [329, 658], [147, 501], [883, 924], [747, 902], [984, 985], [271, 582], [350, 973], [263, 825], [278, 697], [611, 986], [579, 963], [853, 937], [121, 988], [397, 514], [115, 926], [377, 846], [176, 942], [873, 879], [564, 947], [660, 744], [896, 993], [360, 375], [105, 927], [443, 904], [612, 825], [682, 911], [471, 984], [602, 906], [669, 968], [454, 751], [456, 833], [64, 745], [736, 738], [36, 912], [104, 409], [763, 850], [131, 911], [467, 735], [524, 851], [641, 869], [171, 175], [647, 949], [878, 952], [379, 878], [799, 808], [673, 830], [973, 979], [27, 557], [538, 642], [429, 964], [216, 591], [583, 793], [763, 989], [59, 644], [705, 737], [935, 952], [473, 512], [670, 788], [383, 475], [953, 978], [314, 842], [115, 404], [330, 716], [28, 930], [633, 753], [957, 984], [480, 758], [175, 311], [931, 950], [450, 497], [153, 381], [931, 977], [225, 671], [775, 967], [374, 623], [679, 841], [865, 879], [260, 637], [176, 662], [925, 929], [23, 401], [250, 718], [670, 886], [139, 603], [448, 455], [382, 757], [569, 601], [629, 979], [908, 970], [459, 577], [763, 979], [159, 712], [649, 728], [482, 700], [1, 674], [260, 358], [956, 974], [149, 936], [519, 847], [503, 512], [953, 959], [283, 756], [66, 93], [131, 213], [705, 992], [92, 658], [153, 497], [779, 950], [325, 600], [665, 937], [539, 807], [882, 953], [375, 448], [433, 807], [716, 759], [247, 973], [438, 513], [287, 618], [607, 699], [872, 881], [71, 347], [219, 712], [669, 692], [780, 892], [303, 589], [537, 765], [248, 473], [781, 973], [81, 872], [678, 862], [715, 762], [325, 613], [0, 8], [372, 554], [582, 772], [159, 675], [660, 966], [116, 969], [45, 927], [265, 930], [398, 974], [548, 653], [731, 882], [856, 882], [918, 964], [296, 392], [480, 500], [211, 833], [551, 789], [752, 937], [128, 444], [873, 925], [952, 989], [912, 925], [4, 494], [514, 992], [541, 600], [25, 971], [386, 824], [425, 425], [497, 530], [99, 749], [559, 761], [414, 770], [379, 812], [16, 333], [160, 377], [350, 376], [671, 849], [892, 915], [520, 805], [161, 189], [886, 993], [703, 899], [110, 116], [873, 929], [196, 839], [970, 992], [112, 589], [885, 912], [882, 888], [398, 537], [186, 803], [254, 529], [880, 982], [309, 474], [610, 829], [11, 631], [18, 23], [435, 958], [20, 200], [284, 664], [161, 346], [716, 986], [364, 934], [45, 153], [94, 921], [230, 702], [319, 374], [187, 978], [360, 384], [152, 782], [973, 993], [391, 637], [785, 960], [742, 989], [580, 689], [237, 606], [461, 570], [222, 297], [259, 621], [121, 251], [69, 213], [327, 746], [144, 225], [937, 953], [966, 989], [53, 134], [913, 992], [37, 135], [874, 991], [591, 959], [814, 986], [260, 957], [314, 519], [777, 933], [15, 875], [484, 707], [440, 771], [567, 723], [112, 835], [370, 950], [147, 801], [845, 941], [318, 558], [429, 883], [425, 931], [888, 930], [24, 596], [623, 757], [342, 744], [599, 903], [793, 890], [955, 961], [162, 925], [386, 651], [861, 944], [220, 637], [977, 994], [988, 994], [213, 598], [510, 714], [684, 839], [97, 804], [858, 884], [378, 674], [928, 979], [645, 758], [404, 830], [973, 987], [958, 998], [973, 996], [198, 563], [572, 810], [222, 273], [783, 853], [754, 786], [122, 200], [675, 758], [390, 616], [101, 751], [774, 898], [175, 737], [866, 981], [556, 694], [90, 104], [154, 534], [609, 669], [335, 856], [23, 32], [99, 863], [411, 842], [220, 317], [533, 548], [340, 898], [148, 459], [545, 940], [151, 882], [462, 515], [559, 704], [4, 967], [322, 877], [225, 935], [455, 503], [205, 984], [142, 299], [491, 843], [988, 993], [702, 874], [548, 550], [232, 430], [162, 780], [636, 919], [390, 876], [939, 984], [198, 315], [589, 960], [880, 916], [786, 979], [747, 908], [356, 510], [641, 750], [198, 827], [935, 977], [653, 962], [80, 435], [779, 958], [754, 785], [861, 920], [924, 958], [459, 459], [663, 783], [734, 834], [885, 994], [698, 988], [928, 937], [570, 802], [863, 966], [844, 962], [312, 952], [82, 90], [930, 983], [561, 609], [589, 964], [573, 592], [53, 962], [381, 678], [782, 833], [698, 709], [108, 129], [583, 898], [655, 914], [968, 996], [648, 878], [515, 772], [3, 579], [770, 980], [440, 458], [388, 933], [322, 997], [657, 950], [280, 1000], [298, 621], [280, 344], [737, 839], [81, 772], [18, 167], [560, 636], [386, 999], [157, 282], [439, 782], [953, 966], [381, 493], [219, 998], [784, 883], [539, 576], [173, 729], [715, 783], [664, 985], [320, 519], [884, 988], [129, 161], [808, 858], [506, 636], [237, 350], [302, 897], [972, 984], [221, 518], [71, 183], [956, 976], [381, 488], [607, 989], [307, 975], [302, 353], [721, 831], [325, 849], [199, 633], [279, 751], [603, 982], [183, 536], [439, 898], [807, 888], [184, 864], [492, 989], [104, 108], [636, 755], [724, 737], [82, 852], [235, 676], [799, 916], [658, 877], [647, 877], [243, 796], [488, 722], [930, 936], [787, 789], [67, 994], [884, 978], [560, 756], [868, 872], [233, 635], [291, 567], [590, 625], [964, 970], [685, 899], [341, 433], [941, 986], [833, 895], [591, 864]]
        cover = interval_covering(1000, input_list)
        self.assertEqual(3, len(cover))
        for pair in cover:
            self.assertIn(pair, [[804, 828], [407, 634], [358, 360], [498, 672], [82, 703], [824, 922], [8, 18], [723, 885], [879, 885], [823, 981], [496, 586], [511, 974], [314, 536], [614, 825], [154, 831], [188, 326], [372, 910], [714, 939], [182, 929], [111, 222], [53, 775], [275, 995], [3, 536], [604, 914], [753, 866], [572, 702], [244, 342], [660, 684], [628, 853], [109, 810], [497, 806], [703, 883], [84, 664], [371, 419], [550, 561], [739, 824], [739, 833], [721, 946], [233, 872], [243, 260], [529, 614], [240, 996], [514, 589], [195, 863], [32, 82], [301, 881], [26, 249], [525, 607], [531, 934], [70, 975], [15, 523], [363, 959], [215, 813], [249, 299], [741, 990], [477, 971], [770, 815], [395, 865], [188, 572], [377, 749], [947, 960], [622, 773], [725, 767], [966, 1000], [940, 948], [58, 718], [988, 997], [813, 916], [74, 842], [4, 616], [256, 553], [624, 720], [333, 535], [50, 85], [189, 243], [527, 787], [205, 871], [753, 959], [126, 223], [737, 862], [66, 694], [512, 533], [455, 893], [985, 991], [556, 585], [413, 676], [605, 837], [788, 800], [274, 844], [940, 943], [907, 918], [54, 194], [863, 979], [225, 341], [810, 851], [143, 936], [484, 848], [390, 902], [434, 847], [692, 724], [672, 755], [146, 160], [57, 222], [584, 907], [784, 843], [314, 628], [13, 566], [752, 896], [435, 536], [969, 992], [839, 873], [309, 317], [532, 734], [3, 372], [929, 937], [910, 933], [887, 940], [171, 203], [799, 836], [45, 463], [329, 658], [147, 501], [883, 924], [747, 902], [984, 985], [271, 582], [350, 973], [263, 825], [278, 697], [611, 986], [579, 963], [853, 937], [121, 988], [397, 514], [115, 926], [377, 846], [176, 942], [873, 879], [564, 947], [660, 744], [896, 993], [360, 375], [105, 927], [443, 904], [612, 825], [682, 911], [471, 984], [602, 906], [669, 968], [454, 751], [456, 833], [64, 745], [736, 738], [36, 912], [104, 409], [763, 850], [131, 911], [467, 735], [524, 851], [641, 869], [171, 175], [647, 949], [878, 952], [379, 878], [799, 808], [673, 830], [973, 979], [27, 557], [538, 642], [429, 964], [216, 591], [583, 793], [763, 989], [59, 644], [705, 737], [935, 952], [473, 512], [670, 788], [383, 475], [953, 978], [314, 842], [115, 404], [330, 716], [28, 930], [633, 753], [957, 984], [480, 758], [175, 311], [931, 950], [450, 497], [153, 381], [931, 977], [225, 671], [775, 967], [374, 623], [679, 841], [865, 879], [260, 637], [176, 662], [925, 929], [23, 401], [250, 718], [670, 886], [139, 603], [448, 455], [382, 757], [569, 601], [629, 979], [908, 970], [459, 577], [763, 979], [159, 712], [649, 728], [482, 700], [1, 674], [260, 358], [956, 974], [149, 936], [519, 847], [503, 512], [953, 959], [283, 756], [66, 93], [131, 213], [705, 992], [92, 658], [153, 497], [779, 950], [325, 600], [665, 937], [539, 807], [882, 953], [375, 448], [433, 807], [716, 759], [247, 973], [438, 513], [287, 618], [607, 699], [872, 881], [71, 347], [219, 712], [669, 692], [780, 892], [303, 589], [537, 765], [248, 473], [781, 973], [81, 872], [678, 862], [715, 762], [325, 613], [0, 8], [372, 554], [582, 772], [159, 675], [660, 966], [116, 969], [45, 927], [265, 930], [398, 974], [548, 653], [731, 882], [856, 882], [918, 964], [296, 392], [480, 500], [211, 833], [551, 789], [752, 937], [128, 444], [873, 925], [952, 989], [912, 925], [4, 494], [514, 992], [541, 600], [25, 971], [386, 824], [425, 425], [497, 530], [99, 749], [559, 761], [414, 770], [379, 812], [16, 333], [160, 377], [350, 376], [671, 849], [892, 915], [520, 805], [161, 189], [886, 993], [703, 899], [110, 116], [873, 929], [196, 839], [970, 992], [112, 589], [885, 912], [882, 888], [398, 537], [186, 803], [254, 529], [880, 982], [309, 474], [610, 829], [11, 631], [18, 23], [435, 958], [20, 200], [284, 664], [161, 346], [716, 986], [364, 934], [45, 153], [94, 921], [230, 702], [319, 374], [187, 978], [360, 384], [152, 782], [973, 993], [391, 637], [785, 960], [742, 989], [580, 689], [237, 606], [461, 570], [222, 297], [259, 621], [121, 251], [69, 213], [327, 746], [144, 225], [937, 953], [966, 989], [53, 134], [913, 992], [37, 135], [874, 991], [591, 959], [814, 986], [260, 957], [314, 519], [777, 933], [15, 875], [484, 707], [440, 771], [567, 723], [112, 835], [370, 950], [147, 801], [845, 941], [318, 558], [429, 883], [425, 931], [888, 930], [24, 596], [623, 757], [342, 744], [599, 903], [793, 890], [955, 961], [162, 925], [386, 651], [861, 944], [220, 637], [977, 994], [988, 994], [213, 598], [510, 714], [684, 839], [97, 804], [858, 884], [378, 674], [928, 979], [645, 758], [404, 830], [973, 987], [958, 998], [973, 996], [198, 563], [572, 810], [222, 273], [783, 853], [754, 786], [122, 200], [675, 758], [390, 616], [101, 751], [774, 898], [175, 737], [866, 981], [556, 694], [90, 104], [154, 534], [609, 669], [335, 856], [23, 32], [99, 863], [411, 842], [220, 317], [533, 548], [340, 898], [148, 459], [545, 940], [151, 882], [462, 515], [559, 704], [4, 967], [322, 877], [225, 935], [455, 503], [205, 984], [142, 299], [491, 843], [988, 993], [702, 874], [548, 550], [232, 430], [162, 780], [636, 919], [390, 876], [939, 984], [198, 315], [589, 960], [880, 916], [786, 979], [747, 908], [356, 510], [641, 750], [198, 827], [935, 977], [653, 962], [80, 435], [779, 958], [754, 785], [861, 920], [924, 958], [459, 459], [663, 783], [734, 834], [885, 994], [698, 988], [928, 937], [570, 802], [863, 966], [844, 962], [312, 952], [82, 90], [930, 983], [561, 609], [589, 964], [573, 592], [53, 962], [381, 678], [782, 833], [698, 709], [108, 129], [583, 898], [655, 914], [968, 996], [648, 878], [515, 772], [3, 579], [770, 980], [440, 458], [388, 933], [322, 997], [657, 950], [280, 1000], [298, 621], [280, 344], [737, 839], [81, 772], [18, 167], [560, 636], [386, 999], [157, 282], [439, 782], [953, 966], [381, 493], [219, 998], [784, 883], [539, 576], [173, 729], [715, 783], [664, 985], [320, 519], [884, 988], [129, 161], [808, 858], [506, 636], [237, 350], [302, 897], [972, 984], [221, 518], [71, 183], [956, 976], [381, 488], [607, 989], [307, 975], [302, 353], [721, 831], [325, 849], [199, 633], [279, 751], [603, 982], [183, 536], [439, 898], [807, 888], [184, 864], [492, 989], [104, 108], [636, 755], [724, 737], [82, 852], [235, 676], [799, 916], [658, 877], [647, 877], [243, 796], [488, 722], [930, 936], [787, 789], [67, 994], [884, 978], [560, 756], [868, 872], [233, 635], [291, 567], [590, 625], [964, 970], [685, 899], [341, 433], [941, 986], [833, 895], [591, 864]])
        self.assertTrue(helper_functions.verify_all_is_covered(1000, cover))

    def test_cover_long_input_3(self):
        """Test interval cover long #3."""
        input_list = [[623, 969], [999, 1000], [465, 660], [855, 864], [320, 321], [84, 395], [965, 983], [456, 849], [551, 956], [155, 156], [871, 872], [533, 541], [917, 997], [19, 39], [321, 325], [373, 460], [177, 192], [661, 671], [864, 869], [164, 167], [615, 921], [352, 410], [932, 960], [153, 155], [546, 580], [40, 52], [117, 119], [552, 611], [693, 715], [972, 999], [690, 746], [333, 634], [357, 445], [105, 950], [504, 964], [445, 768], [16, 954], [869, 870], [291, 292], [594, 610], [154, 259], [420, 424], [937, 940], [992, 995], [971, 972], [534, 638], [119, 121], [690, 693], [924, 924], [569, 821], [284, 881], [722, 826], [221, 251], [31, 737], [192, 755], [790, 981], [425, 450], [246, 689], [382, 433], [339, 343], [237, 442], [882, 908], [306, 895], [605, 737], [585, 594], [561, 691], [530, 777], [726, 746], [685, 690], [284, 291], [563, 664], [553, 964], [277, 761], [128, 153], [791, 799], [799, 812], [318, 808], [691, 959], [610, 632], [973, 986], [658, 745], [343, 352], [913, 919], [472, 484], [950, 956], [496, 969], [392, 622], [52, 53], [683, 685], [641, 649], [167, 177], [715, 726], [157, 520], [110, 115], [261, 995], [919, 971], [53, 72], [897, 913], [616, 823], [156, 164], [774, 787], [697, 979], [718, 773], [770, 774], [121, 127], [208, 577], [292, 320], [387, 792], [757, 926], [464, 466], [466, 472], [940, 941], [11, 703], [474, 723], [854, 944], [979, 996], [780, 970], [655, 893], [280, 284], [632, 641], [852, 855], [883, 897], [966, 968], [816, 837], [251, 260], [918, 937], [913, 916], [465, 704], [426, 548], [529, 533], [484, 510], [510, 529], [36, 426], [723, 865], [764, 845], [115, 881], [260, 280], [454, 649], [72, 110], [967, 990], [8, 19], [652, 661], [541, 546], [486, 491], [913, 918], [671, 683], [312, 638], [4, 641], [325, 339], [971, 978], [118, 763], [646, 974], [410, 425], [837, 852], [649, 652], [192, 221], [872, 883], [644, 839], [127, 128], [694, 922], [458, 813], [901, 928], [607, 655], [115, 117], [411, 472], [0, 8], [956, 971], [227, 953], [741, 991], [450, 464], [812, 816], [746, 770], [143, 312], [126, 961], [72, 990], [108, 599], [366, 979], [580, 585], [924, 968], [120, 301], [629, 834], [944, 965], [941, 950], [690, 776], [203, 637], [39, 40], [787, 791], [325, 855], [870, 871], [221, 700], [885, 997]]
        cover = interval_covering(1000, input_list)
        self.assertEqual(5, len(cover))
        for pair in cover:
            self.assertIn(pair, [[623, 969], [999, 1000], [465, 660], [855, 864], [320, 321], [84, 395], [965, 983], [456, 849], [551, 956], [155, 156], [871, 872], [533, 541], [917, 997], [19, 39], [321, 325], [373, 460], [177, 192], [661, 671], [864, 869], [164, 167], [615, 921], [352, 410], [932, 960], [153, 155], [546, 580], [40, 52], [117, 119], [552, 611], [693, 715], [972, 999], [690, 746], [333, 634], [357, 445], [105, 950], [504, 964], [445, 768], [16, 954], [869, 870], [291, 292], [594, 610], [154, 259], [420, 424], [937, 940], [992, 995], [971, 972], [534, 638], [119, 121], [690, 693], [924, 924], [569, 821], [284, 881], [722, 826], [221, 251], [31, 737], [192, 755], [790, 981], [425, 450], [246, 689], [382, 433], [339, 343], [237, 442], [882, 908], [306, 895], [605, 737], [585, 594], [561, 691], [530, 777], [726, 746], [685, 690], [284, 291], [563, 664], [553, 964], [277, 761], [128, 153], [791, 799], [799, 812], [318, 808], [691, 959], [610, 632], [973, 986], [658, 745], [343, 352], [913, 919], [472, 484], [950, 956], [496, 969], [392, 622], [52, 53], [683, 685], [641, 649], [167, 177], [715, 726], [157, 520], [110, 115], [261, 995], [919, 971], [53, 72], [897, 913], [616, 823], [156, 164], [774, 787], [697, 979], [718, 773], [770, 774], [121, 127], [208, 577], [292, 320], [387, 792], [757, 926], [464, 466], [466, 472], [940, 941], [11, 703], [474, 723], [854, 944], [979, 996], [780, 970], [655, 893], [280, 284], [632, 641], [852, 855], [883, 897], [966, 968], [816, 837], [251, 260], [918, 937], [913, 916], [465, 704], [426, 548], [529, 533], [484, 510], [510, 529], [36, 426], [723, 865], [764, 845], [115, 881], [260, 280], [454, 649], [72, 110], [967, 990], [8, 19], [652, 661], [541, 546], [486, 491], [913, 918], [671, 683], [312, 638], [4, 641], [325, 339], [971, 978], [118, 763], [646, 974], [410, 425], [837, 852], [649, 652], [192, 221], [872, 883], [644, 839], [127, 128], [694, 922], [458, 813], [901, 928], [607, 655], [115, 117], [411, 472], [0, 8], [956, 971], [227, 953], [741, 991], [450, 464], [812, 816], [746, 770], [143, 312], [126, 961], [72, 990], [108, 599], [366, 979], [580, 585], [924, 968], [120, 301], [629, 834], [944, 965], [941, 950], [690, 776], [203, 637], [39, 40], [787, 791], [325, 855], [870, 871], [221, 700], [885, 997]])
        self.assertTrue(helper_functions.verify_all_is_covered(1000, cover))

    def test_cover_long_input_4(self):
        """Test interval cover long #4."""
        input_list = [[230, 370], [520, 996], [799, 938], [537, 911], [430, 614], [0, 26], [822, 894], [461, 671], [26, 35], [408, 854], [35, 230], [370, 430], [802, 939], [98, 758], [236, 521], [938, 1000], [363, 665], [717, 748], [614, 799]]
        cover = interval_covering(1000, input_list)
        self.assertEqual(6, len(cover))
        for pair in cover:
            self.assertIn(pair, [[230, 370], [520, 996], [799, 938], [537, 911], [430, 614], [0, 26], [822, 894], [461, 671], [26, 35], [408, 854], [35, 230], [370, 430], [802, 939], [98, 758], [236, 521], [938, 1000], [363, 665], [717, 748], [614, 799]])
        self.assertTrue(helper_functions.verify_all_is_covered(1000, cover))

    def test_cover_long_input_5(self):
        """Test interval cover long #5."""
        cover = interval_covering(1000, [[789, 875], [249, 866], [236, 669], [84, 174], [575, 749], [744, 795], [435, 663], [0, 607], [493, 925], [607, 1000], [539, 576], [240, 587]])
        self.assertEqual(set(tuple(pair) for pair in cover), {(0, 607), (607, 1000)})
